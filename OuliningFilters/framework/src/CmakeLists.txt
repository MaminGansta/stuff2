cmake_minimum_required(VERSION 3.12)
project(Framework VERSION 0.0.0)


file(GLOB_RECURSE SRCS *.cpp)
file(GLOB_RECURSE HDRS *.h)

add_library(Framework ${SRCS} ${HDRS})

target_link_libraries(Framework imgui)
target_link_libraries(Framework stb_image)

set_target_properties(
    Framework PROPERTIES
    CXX_STANDARD 20
    CXX_STANDARD_REQUIRED ON
)

# Defines
add_definitions(-D"GLEW_STATIC")
add_definitions(-D"GLM_FORCE_SWIZZLE")
add_definitions(-D"STBI_WINDOWS_UTF8")

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_definitions(-D"CLANG_CXX11_ATOMICS 1")
endif()

# Include directories
target_include_directories(
    Framework PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/core
    ${CMAKE_CURRENT_SOURCE_DIR}/core/ui
    ${CMAKE_CURRENT_SOURCE_DIR}/opengl
    ${CMAKE_CURRENT_SOURCE_DIR}/opencl
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/imgui
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/stb_image
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/SDL2/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/GLEW/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/spdlog/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/glm/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/opencl3/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/thread_pool/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/nativefiledialog/src/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/random/include/effolkronium
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/RNG
)

# Libraries directories
target_link_directories(
    Framework PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/SDL2/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/GLEW/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/../dependencies/opencl3/lib
)

# Libraries
target_link_libraries(
    Framework
    SDL2main.lib
    SDL2.dll
    glew32s.lib
    opengl32.lib
    OpenCL.lib
)

# Add dll Macro
set(dll_dir ${PROJECT_SOURCE_DIR}/../dependencies/dll CACHE INTERNAL "dll_dir")

macro(add_dll ProjectName)
  add_custom_command(TARGET ${ProjectName} PRE_BUILD
                     COMMAND ${CMAKE_COMMAND} -E copy_directory
                     ${dll_dir}
                     $<TARGET_FILE_DIR:${ProjectName}>)
endmacro()